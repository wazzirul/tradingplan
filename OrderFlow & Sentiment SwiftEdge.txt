//@version=6
indicator("OrderFlow & Sentiment SwiftEdge", overlay=false)

// --- Inputs ---
posCol = input.color(color.green, "Positive Color")
negCol = input.color(color.red, "Negative Color")
currentPriceCol = color.new(color.orange, 0)  // Orange farve til aktuelt prisniveau
lot_scaling_factor = input.float(0.1, "Lot Scaling Factor (1 Volume = X Lots)", minval=0.01, maxval=1.0, step=0.01)
table_position = input.string("Top", "Table Position", options=["Top", "Middle", "Bottom"])

// --- Simuler orderbook-data for det aktuelle candlestick ---
var float[] price_levels = array.new<float>(10, na)
var float[] buy_volumes = array.new<float>(10, 0)
var float[] sell_volumes = array.new<float>(10, 0)

// Opdel prisrangen i 10 intervaller
float bin_size = (high - low) / 10
for i = 0 to 9
    array.set(price_levels, i, low + bin_size * i + bin_size / 2)

// Estimer købs- og salgsvolumen for hvert prisinterval med variation
float price_change = close - open
float base_weight = 0.0
for i = 0 to 9
    float level = array.get(price_levels, i)
    // Grundlæggende vægt baseret på nærhed til open og close (højere aktivitet)
    float dist_to_open = math.abs(level - open) / (high - low)
    float dist_to_close = math.abs(level - close) / (high - low)
    float activity_weight = 1.0 - math.min(dist_to_open, dist_to_close)  // Højere vægt tæt på open/close
    
    // Grundlæggende vægt baseret på prisbevægelse
    if price_change > 0
        base_weight := (level - low) / (high - low)
    else if price_change < 0
        base_weight := (high - level) / (high - low)
    else
        base_weight := 0.5
    
    // Tilføj en tilfældig variation for at simulere mere realistisk orderflow
    float variation = (math.random(0, 1) - 0.5) * 0.4  // Variation mellem -0.2 og 0.2
    float adjusted_weight = math.min(math.max(base_weight + variation, 0.1), 0.9)  // Begræns vægten mellem 0.1 og 0.9
    
    // Skaler volumen op til at repræsentere lotstørrelser (1 volumenenhed = lot_scaling_factor lots)
    float scaled_volume = volume * lot_scaling_factor * 10000  // Antag 1 lot = 100.000 enheder
    float bin_volume = scaled_volume * activity_weight / 10  // Fordel volumen baseret på aktivitet
    array.set(buy_volumes, i, bin_volume * adjusted_weight)
    array.set(sell_volumes, i, bin_volume * (1 - adjusted_weight))

// Beregn markedssentiment for hele candlesticket
float total_buy_volume = 0.0
float total_sell_volume = 0.0
for i = 0 to 9
    total_buy_volume := total_buy_volume + array.get(buy_volumes, i)
    total_sell_volume := total_sell_volume + array.get(sell_volumes, i)

float total_volume = total_buy_volume + total_sell_volume
float buy_sentiment = total_volume > 0 ? (total_buy_volume / total_volume) * 100 : 50.0
float sell_sentiment = total_volume > 0 ? (total_sell_volume / total_volume) * 100 : 50.0
color sentiment_color = buy_sentiment > sell_sentiment ? posCol : negCol

// --- Find det aktuelle prisniveau i orderbook-tabellen ---
int current_price_bin = -1
float min_distance = math.abs(close - array.get(price_levels, 0))
for i = 0 to 9
    float distance = math.abs(close - array.get(price_levels, i))
    if distance < min_distance
        min_distance := distance
        current_price_bin := i

// --- Opret kombineret tabel for sentiment og orderbook-data (3 kolonner, 12 rækker) ---
var table combined_table = switch table_position
    "Top" => table.new(position.top_right, 3, 12, border_width=1)
    "Middle" => table.new(position.middle_right, 3, 12, border_width=1)
    "Bottom" => table.new(position.bottom_right, 3, 12, border_width=1)

if barstate.isrealtime or barstate.islast
    // Sentiment-række (række 0)
    table.cell(combined_table, 0, 0, str.tostring(math.round(buy_sentiment, 1)) + "% Buy / " + str.tostring(math.round(sell_sentiment, 1)) + "% Sell", bgcolor=sentiment_color, text_color=color.white)
    table.cell(combined_table, 1, 0, "Total Buy: " + str.tostring(math.round(total_buy_volume)), bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 2, 0, "Total Sell: " + str.tostring(math.round(total_sell_volume)), bgcolor=color.blue, text_color=color.white)
    
    // Overskrift for orderbook (række 1)
    table.cell(combined_table, 0, 1, "Price", bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 1, 1, "Buy Volume", bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 2, 1, "Sell Volume", bgcolor=color.blue, text_color=color.white)
    
    // Fyld tabellen med orderbook-data, sorteret fra højeste pris (øverst) til laveste (nederst)
    for i = 0 to 9
        int row = 11 - i  // Sorter fra højeste pris (øverst) til laveste (nederst), start fra række 2
        float price = array.get(price_levels, i)
        float buy_vol = array.get(buy_volumes, i)
        float sell_vol = array.get(sell_volumes, i)
        bool is_current_price = i == current_price_bin
        color buy_bg = is_current_price ? currentPriceCol : (buy_vol > sell_vol ? posCol : color.gray)
        color sell_bg = is_current_price ? currentPriceCol : (sell_vol > buy_vol ? negCol : color.gray)
        color price_bg = is_current_price ? currentPriceCol : color.gray
        table.cell(combined_table, 0, row, str.tostring(math.round(price, 0), "#"), bgcolor=price_bg, text_color=color.white)
        table.cell(combined_table, 1, row, str.tostring(int(buy_vol)), bgcolor=buy_bg, text_color=color.white)
        table.cell(combined_table, 2, row, str.tostring(int(sell_vol)), bgcolor=sell_bg, text_color=color.white)