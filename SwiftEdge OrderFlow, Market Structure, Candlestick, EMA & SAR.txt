
// =============================
// SwiftEdge OrderFlow, Market Structure, Candlestick, EMA & SAR
// Optimized for Dark Mode & Readability
// =============================
//@version=6
indicator("SwiftEdge OrderFlow, Market Structure, Candlestick, EMA & SAR", overlay=true)

// === INPUTS ===
posCol = input.color(color.new(color.lime, 0), "Positive Color")
negCol = input.color(color.new(color.red, 0), "Negative Color")
currentPriceCol = color.new(color.orange, 10)
lot_scaling_factor = input.float(0.1, "Lot Scaling Factor", minval=0.01, maxval=1.0, step=0.01)
table_position = input.string("Top", "Table Position", options=["Top", "Middle", "Bottom"])

// === PARABOLIC SAR ===
sar_af_start = input.float(0.02, title="SAR Acceleration Start", minval=0.001, step=0.001)
sar_af_inc = input.float(0.02, title="SAR Acceleration Increment", minval=0.001, step=0.001)
sar_af_max = input.float(0.2, title="SAR Acceleration Max", minval=0.01, step=0.01)
sar = ta.sar(sar_af_start, sar_af_inc, sar_af_max)
plot(sar, style=plot.style_circles, color=color.new(color.fuchsia, 0), linewidth=2, title="Parabolic SAR")

// === EMA CROSS ===
ema_fast = ta.ema(close, 4)
ema_slow = ta.ema(close, 50)
ema_bull_cross = ta.crossover(ema_fast, ema_slow)
ema_bear_cross = ta.crossunder(ema_fast, ema_slow)
plot(ema_fast, color=color.new(color.lime, 0), title="EMA 4")
plot(ema_slow, color=color.new(color.red, 0), title="EMA 50")

// ...existing code...



// === MARKET STRUCTURE ===
period_market = 20
is_higher_high = high > ta.highest(high, period_market)[1]
is_lower_low = low < ta.lowest(low, period_market)[1]
plotshape(is_higher_high, title="Higher High", location=location.abovebar, color=color.new(color.blue, 0), style=shape.triangleup, size=size.tiny)
plotshape(is_lower_low, title="Lower Low", location=location.belowbar, color=color.new(color.orange, 0), style=shape.triangledown, size=size.tiny)

// === CANDLESTICK PATTERNS ===
// Bullish Engulfing
bullish_engulfing = close[1] < open[1] and close > open and close > open[1] and open < close[1]
// Bearish Engulfing
bearish_engulfing = close[1] > open[1] and close < open and close < open[1] and open > close[1]
// Hammer
hammer = (open < close) and ((close - open) < (high - low) * 0.3) and ((open - low) > (high - close) * 2)
// Inverted Hammer
inverted_hammer = (open < close) and ((close - open) < (high - low) * 0.3) and ((high - close) > (open - low) * 2)
// Shooting Star
shooting_star = (open > close) and ((open - close) < (high - low) * 0.3) and ((high - open) > (close - low) * 2)
// Hanging Man
hanging_man = (open > close) and ((open - close) < (high - low) * 0.3) and ((open - low) > (high - close) * 2)
// Doji
doji = math.abs(close - open) <= (high - low) * 0.1
// Morning Star
morning_star = close[2] < open[2] and doji[1] and close > open and close > close[1]
// Evening Star
evening_star = close[2] > open[2] and doji[1] and close < open and close < close[1]
// Three White Soldiers
three_white_soldiers = close > open and close[1] > open[1] and close[2] > open[2] and open > close[1] and open[1] > close[2]
// Three Black Crows
three_black_crows = close < open and close[1] < open[1] and close[2] < open[2] and open < close[1] and open[1] < close[2]
// Piercing Line
piercing_line = close[1] < open[1] and open < close[1] and close > (open[1] + close[1]) / 2
// Dark Cloud Cover
dark_cloud_cover = close[1] > open[1] and open > close[1] and close < (open[1] + close[1]) / 2
// Tweezer Bottom
tweezer_bottom = (low == low[1]) and close > open and close[1] < open[1]
// Tweezer Top
tweezer_top = (high == high[1]) and close < open and close[1] > open[1]

// === PLOT CANDLESTICK PATTERNS ===
plotshape(bullish_engulfing, title="Bullish Engulfing", location=location.belowbar, color=color.new(color.lime, 0), style=shape.labelup, size=size.tiny)
plotshape(bearish_engulfing, title="Bearish Engulfing", location=location.abovebar, color=color.new(color.red, 0), style=shape.labeldown, size=size.tiny)
plotshape(hammer, title="Hammer", location=location.belowbar, color=color.new(color.lime, 30), style=shape.triangleup, size=size.tiny)
plotshape(inverted_hammer, title="Inverted Hammer", location=location.abovebar, color=color.new(color.lime, 30), style=shape.triangledown, size=size.tiny)
plotshape(shooting_star, title="Shooting Star", location=location.abovebar, color=color.new(color.orange, 0), style=shape.triangledown, size=size.tiny)
plotshape(hanging_man, title="Hanging Man", location=location.abovebar, color=color.new(color.orange, 30), style=shape.triangleup, size=size.tiny)
plotshape(doji, title="Doji", location=location.abovebar, color=color.new(color.gray, 0), style=shape.circle, size=size.tiny)
plotshape(morning_star, title="Morning Star", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.tiny)
plotshape(evening_star, title="Evening Star", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.tiny)
plotshape(three_white_soldiers, title="Three White Soldiers", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.tiny)
plotshape(three_black_crows, title="Three Black Crows", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.tiny)
plotshape(piercing_line, title="Piercing Line", location=location.belowbar, color=color.new(color.lime, 0), style=shape.labelup, size=size.tiny)
plotshape(dark_cloud_cover, title="Dark Cloud Cover", location=location.abovebar, color=color.new(color.red, 0), style=shape.labeldown, size=size.tiny)
plotshape(tweezer_bottom, title="Tweezer Bottom", location=location.belowbar, color=color.new(color.lime, 0), style=shape.triangleup, size=size.tiny)
plotshape(tweezer_top, title="Tweezer Top", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.tiny)

// --- OrderFlow & Sentiment SwiftEdge ---
var float[] price_levels = array.new_float(10, na)
var float[] buy_volumes = array.new_float(10, 0)
var float[] sell_volumes = array.new_float(10, 0)
float bin_size = (high - low) / 10
for i = 0 to 9
    array.set(price_levels, i, low + bin_size * i + bin_size / 2)
float price_change = close - open
float base_weight = 0.0
for i = 0 to 9
    float level = array.get(price_levels, i)
    float dist_to_open = math.abs(level - open) / (high - low)
    float dist_to_close = math.abs(level - close) / (high - low)
    float activity_weight = 1.0 - math.min(dist_to_open, dist_to_close)
    if price_change > 0
        base_weight := (level - low) / (high - low)
    else if price_change < 0
        base_weight := (high - level) / (high - low)
    else
        base_weight := 0.5
    float variation = (math.random(0, 1) - 0.5) * 0.4
    float adjusted_weight = math.min(math.max(base_weight + variation, 0.1), 0.9)
    float scaled_volume = volume * lot_scaling_factor * 10000
    float bin_volume = scaled_volume * activity_weight / 10
    array.set(buy_volumes, i, bin_volume * adjusted_weight)
    array.set(sell_volumes, i, bin_volume * (1 - adjusted_weight))
float total_buy_volume = 0.0
float total_sell_volume = 0.0
for i = 0 to 9
    total_buy_volume := total_buy_volume + array.get(buy_volumes, i)
    total_sell_volume := total_sell_volume + array.get(sell_volumes, i)
float total_volume = total_buy_volume + total_sell_volume
float buy_sentiment = total_volume > 0 ? (total_buy_volume / total_volume) * 100 : 50.0
float sell_sentiment = total_volume > 0 ? (total_sell_volume / total_volume) * 100 : 50.0
color sentiment_color = buy_sentiment > sell_sentiment ? posCol : negCol
int current_price_bin = -1
float min_distance = math.abs(close - array.get(price_levels, 0))
for i = 0 to 9
    float distance = math.abs(close - array.get(price_levels, i))
    if distance < min_distance
        min_distance := distance
        current_price_bin := i
var table combined_table = switch table_position
    "Top" => table.new(position.top_right, 4, 12, border_width=1)
    "Middle" => table.new(position.middle_right, 4, 12, border_width=1)
    "Bottom" => table.new(position.bottom_right, 4, 12, border_width=1)
if barstate.isrealtime or barstate.islast
    table.cell(combined_table, 0, 0, "Sentiment: " + str.tostring(math.round(buy_sentiment, 1)) + "% Buy / " + str.tostring(math.round(sell_sentiment, 1)) + "% Sell", bgcolor=sentiment_color, text_color=color.white)
    table.cell(combined_table, 1, 0, "", bgcolor=color.new(color.black, 100))
    table.cell(combined_table, 2, 0, "", bgcolor=color.new(color.black, 100))
    table.cell(combined_table, 0, 1, "Price", bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 1, 1, "Buy Volume", bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 2, 1, "Sell Volume", bgcolor=color.blue, text_color=color.white)
    table.cell(combined_table, 3, 1, "Total Volume", bgcolor=color.blue, text_color=color.white)
    for i = 0 to 9
        int row = 11 - i
        float price = array.get(price_levels, i)
        float buy_vol = array.get(buy_volumes, i)
        float sell_vol = array.get(sell_volumes, i)
        float total_vol = buy_vol + sell_vol
        bool is_current_price = i == current_price_bin
        color buy_bg = is_current_price ? currentPriceCol : (buy_vol > sell_vol ? posCol : color.gray)
        color sell_bg = is_current_price ? currentPriceCol : (sell_vol > buy_vol ? negCol : color.gray)
        color price_bg = is_current_price ? currentPriceCol : color.gray
        color total_bg = is_current_price ? currentPriceCol : color.gray
        table.cell(combined_table, 0, row, str.tostring(math.round(price, 0), "#"), bgcolor=price_bg, text_color=color.white)
        table.cell(combined_table, 1, row, str.tostring(int(buy_vol)), bgcolor=buy_bg, text_color=color.white)
        table.cell(combined_table, 2, row, str.tostring(int(sell_vol)), bgcolor=sell_bg, text_color=color.white)
        table.cell(combined_table, 3, row, str.tostring(int(total_vol)), bgcolor=total_bg, text_color=color.white)



